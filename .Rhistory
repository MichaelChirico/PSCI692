melt(toy_data, measure.vars = patterns("^plane"),
variable.name = "year", value.name = "plane")
toy_data[, Height]
toy_data[ , strsplit(Heigh, split = "'|ft|feet")]
toy_data[ , strsplit(Height, split = "'|ft|feet")]
warnings()
toy_data[, cat(Height)]
toy_data[, cat(Height, sep = "\n")]
toy_data[ , strsplit(Height, split = "'[^']*|ft|feet")]
toy_data[ , strsplit(Height, split = "\"[^\"]*|'[^']*|ft|feet")]
toy_data[ , tstrsplit(Height, split = "\"[^\"]*|'[^']*|ft|feet")]
toy_data[13]
toy_data[ , tstrsplit(Height, split = "[^\"]*\"|[^']*'|ft|feet")]
toy_data[, cat(Height, sep = "\n")]
toy_data[ , feet := gsub("^([0-9]+).*", "\\1", Height)][]
toy_data[ , .(Height, feet)]
toy_data[ , height_1 := gsub("^([0-9]+).*", "\\1", Height)]
toy_data[ , height_2 := gsub("^[0-9]+[^0-9]+([0-9]+).*", "\\1", Height)]
toy_data[ , .(Height, height_1, height_2)]
toy_data[ , height_num := as.numeric(height_1) + as.numeric(height_2)/12]
toy_data
toy_data[grepl("cm", Height), height_num := as.numeric(gsub("[^0-9]", "", Height)) / 2.54]
toy_data
toy_data[grepl("cm", Height), height_num := as.numeric(gsub("[^0-9]", "", Height)) / 2.54 / 12][]
toy_data[grepl("inches", Height) & !grepl("feet", Height),
height_num := as.numeric(gsub("[^0-9]", "", Height)) / 12][]
toy_data[ , paste0("height_", 1:2) := NULL][]
toy_data_long[ , hairlength_num := as.integer(gsub("[^0-9]", "", hairlength))][]
# Michael Chirico
# August 30, 2016
# PSCI 692
# Stats Lab 1
# Preliminaries ####
## Clear workspace
rm(list = ls(all = TRUE))
## Set working directory
##   (where R looks for files by default hereafter)
setwd("~/Dropbox/Teaching/PSCI692")
# Hello World/Basics ####
print("Hello World")
## alternatively
cat("Hello World")
## Simple calculations
4 + 5
## Help files
?print
## Package installation
##   By default, this looks to CRAN,
##   (https://cran.r-project.org/)
##   (Comprehensive R Archive Network)
##   which is a managed plethora of packages,
##   all of which have to meet some minimum
##   standards of quality/documentation
install.packages("data.table")
## Loading the library
library(data.table)
# Reading Data, Basic Manipulation ####
## fread stands for **f**ast read. It is
##   typically several orders of magnitude faster
##   than the native read.csv available in R;
##   you won't typically notice unless the file has
##   in excess of 100,000 observations.
toy_data <- fread("ToyDataset_Jun30.csv")
## Summarize the data to get a quick glance
summary(toy_data)
## Renaming variables
##   *note -- this is the way to do this with the
##            data.table package. subtle differences.
setnames(toy_data, "Location of senior year in high school", "hsloc")
## Can do several at once
setnames(toy_data,
c("Year at Stanford", "Hair length (in inches)"),
c("styear", "hairlength"))
## Rename according to a pattern
flight_vars <- grep("^flights", names(toy_data), value = TRUE)
setnames(toy_data,
flight_vars, gsub("^flights", "plane", flight_vars))
toy_data_long <- melt(toy_data, measure.vars = patterns("^plane"),
variable.name = "year", value.name = "plane")
## Aggregation
toy_data_long[ , sum(plane), by = year]
## Reorder data
setorder(toy_data_long, Timestamp, Name, Birthday, Birthplace)
## Manipulating variables to be easier to use
##   *note: := is data.table-specific. See
##          http://stackoverflow.com/questions/7029944/ and
##          https://rawgit.com/wiki/Rdatatable/data.table/vignettes/datatable-reference-semantics.html
### Height as a string is pretty useless. Better as a decimal.
###   First, split roughly into feet and inches
###   (learned by inspection how the data is structured)
toy_data_long[ , height_1 := gsub("^([0-9]+).*", "\\1", Height)]
toy_data_long[ , height_2 := gsub("^[0-9]+[^0-9]+([0-9]+).*", "\\1", Height)]
toy_data_long[ , height_num := as.numeric(height_1) + as.numeric(height_2)/12]
### missed those expressed in inches alone or centimeters
toy_data_long[grepl("cm", Height),
height_num := as.numeric(gsub("[^0-9]", "", Height)) / 2.54 / 12]
toy_data_long[grepl("inches", Height) & !grepl("feet", Height),
height_num := as.numeric(gsub("[^0-9]", "", Height)) / 12][]
### remove temporary variables
toy_data_long[ , paste0("height_", 1:2) := NULL]
### Ditto hair length (luckily cleaner, but inspect!!)
toy_data_long[ , hairlength_num := as.integer(gsub("[^0-9]", "", hairlength))][]
toy_data_long[ , summary(hairlength_num)]
toy_data
toy_data
toy_data[ , as.Date(Birthday)]
toy_data_long[ , bday := as.Date(Birthday, format = "%m/%d/%Y")][]
toy_data[ , bday := as.Date(Birthday, format = "%m/%d/%Y")][]
strptime
?strptime
as.Date("May 15th, 1989")
ord_dates <- c("September 1st, 2016", "September 2nd, 2016",
"September 3rd, 2016", "September 4th, 2016")
as.Date(ord_dates, format = c("%B %d, %Y"))
as.Date(gsub("([0-9]+)(st|nd|rd|th)", "\\1", ord_dates))
as.Date(gsub("([0-9]+)(st|nd|rd|th)", "\\1", ord_dates), format = "%B %d, %Y")
as.Date(ord_dates, format = c("%B %d, %Y"))
toy_data
toy_data_long[ , bday := as.Date(Birthday, format = "%m/%d/%Y")]
toy_data_long[is.na(bday), bday :=
as.Date(gsub("([0-9]+(st|nd|rd|th))", "\\1", Birthday),
format = "%B %d, %Y")][]
toy_data_long[ , bday := as.Date(Birthday, format = "%m/%d/%Y")]
toy_data[is.na(bday), bday :=
as.Date(gsub("([0-9]+(st|nd|rd|th))", "\\1", Birthday),
format = "%B %d, %Y")][]
toy_data_long[is.na(bday),]
toy_data_long[is.na(bday),
as.Date(gsub("([0-9]+(st|nd|rd|th))", "\\1", Birthday),
format = "%B %d, %Y")]
toy_data_long[is.na(bday),gsub("([0-9]+(st|nd|rd|th))", "\\1", Birthday)]
toy_data_long[is.na(bday),gsub("([0-9])+(st|nd|rd|th)", "\\1", Birthday)]
toy_data_long[is.na(bday), bday :=
as.Date(gsub("([0-9])+(st|nd|rd|th)", "\\1", Birthday),
format = "%B %d, %Y")]
toy_data[is.na(bday), bday :=
as.Date(gsub("([0-9])+(st|nd|rd|th)", "\\1", Birthday),
format = "%B %d, %Y")]
toy_data[is.na(bday), bday :=
as.Date(gsub("([0-9])+(st|nd|rd|th)", "\\1", Birthday),
format = "%B %d, %Y")][]
toy_data_long[is.na(bday), bday :=
as.Date(gsub("([0-9])+(st|nd|rd|th)", "\\1", Birthday),
format = "%B %e, %Y")]
toy_data[is.na(bday), bday :=
as.Date(gsub("([0-9])+(st|nd|rd|th)", "\\1", Birthday),
format = "%B %e, %Y")][]
toy_data_long[is.na(bday), gsub("([0-9])+(st|nd|rd|th)", "\\1", Birthday)]
as.Date("August 4 1990", format = "%B %e %Y")
toy_data_long[is.na(bday), bday :=
as.Date(gsub("([0-9])+(st|nd|rd|th)", "\\1", Birthday),
format = "%B %e %Y")]
toy_data[is.na(bday), bday :=
as.Date(gsub("([0-9])+(st|nd|rd|th)", "\\1", Birthday),
format = "%B %e %Y")][]
toy_data_long[ , range(as.integer(format(bday, "%Y")))]
toy_data_long[ , table((format(bday, "%Y"))]
toy_data_long[ , table(format(bday, "%Y"))]
library(haven)
names <- setDT(read_dta("Names.dta"))
names
toy_data
library(haven)
names <- setDT(read_dta("Names.dta"))
names[toy_data, on = c(name = "Name")]
toy_data <- names[toy_data, on = c(name = "Name")]
x <- seq(0, 10, length.out = 1000)
plot(x, x^2)
plot(x, x^2, xlim = c(0, 5))
plot(x, x^2, xlim = c(0, 2))
lines(x, x^(1/2))
plot(x, x^2, type = "l")
plot(x, x^2, type = "l", xlim = c(0, 5))
plot(x, x^2, type = "l", xlim = c(0, 2))
lines(x, x^(1/2))
plot(x, x^2, type = "l")
plot(x, x^2, type = "l", xlim = c(0, 5))
plot(x, log(x), xlim = c(0, 5))
toy_data[ , plot(hairlength_num, height_num)]
# Michael Chirico
# August 30, 2016
# PSCI 692
# Stats Lab 1
# Preliminaries ####
## Clear workspace
rm(list = ls(all = TRUE))
## Set working directory
##   (where R looks for files by default hereafter)
setwd("~/Dropbox/Teaching/PSCI692")
# Hello World/Basics ####
print("Hello World")
## alternatively
cat("Hello World")
## Simple calculations
4 + 5
## Help files
?print
## Package installation
##   By default, this looks to CRAN,
##   (https://cran.r-project.org/)
##   (Comprehensive R Archive Network)
##   which is a managed plethora of packages,
##   all of which have to meet some minimum
##   standards of quality/documentation
install.packages("data.table")
## Loading the library
library(data.table)
# Reading Data, Basic Manipulation ####
## fread stands for **f**ast read. It is
##   typically several orders of magnitude faster
##   than the native read.csv available in R;
##   you won't typically notice unless the file has
##   in excess of 100,000 observations.
toy_data <- fread("ToyDataset_Jun30.csv")
## Summarize the data to get a quick glance
summary(toy_data)
## Renaming variables
##   *note -- this is the way to do this with the
##            data.table package. subtle differences.
setnames(toy_data, "Location of senior year in high school", "hsloc")
## Can do several at once
setnames(toy_data,
c("Year at Stanford", "Hair length (in inches)"),
c("styear", "hairlength"))
## Rename according to a pattern
flight_vars <- grep("^flights", names(toy_data), value = TRUE)
setnames(toy_data,
flight_vars, gsub("^flights", "plane", flight_vars))
toy_data_long <- melt(toy_data, measure.vars = patterns("^plane"),
variable.name = "year", value.name = "plane")
## Aggregation
toy_data_long[ , sum(plane), by = year]
## Reorder data
setorder(toy_data_long, Timestamp, Name, Birthday, Birthplace)
## Manipulating variables to be easier to use
##   *note: := is data.table-specific. See
##          http://stackoverflow.com/questions/7029944/ and
##          https://rawgit.com/wiki/Rdatatable/data.table/vignettes/datatable-reference-semantics.html
### Height as a string is pretty useless. Better as a decimal.
###   First, split roughly into feet and inches
###   (learned by inspection how the data is structured)
toy_data[ , height_1 := gsub("^([0-9]+).*", "\\1", Height)]
toy_data[ , height_2 := gsub("^[0-9]+[^0-9]+([0-9]+).*", "\\1", Height)]
toy_data[ , height_num := as.numeric(height_1) + as.numeric(height_2)/12]
### missed those expressed in inches alone or centimeters
toy_data[grepl("cm", Height),
height_num := as.numeric(gsub("[^0-9]", "", Height)) / 2.54 / 12]
toy_data[grepl("inches", Height) & !grepl("feet", Height),
height_num := as.numeric(gsub("[^0-9]", "", Height)) / 12][]
### remove temporary variables
toy_data[ , paste0("height_", 1:2) := NULL]
### Ditto hair length (luckily cleaner, but inspect!!)
toy_data[ , hairlength_num := as.integer(gsub("[^0-9]", "", hairlength))]
#### By inspection, some dates appear to have slipped into the hairlenght column.
toy_data[hairlength > 36, hairlength := NA]
### Gender dummy
toy_data[ , male := Gender == "Male"]
### Converting Birthday to Date (see ?as.Date and ?strptime)
#### First, fix outlier
toy_data[grepl("2991", Birthday),
Birthday := gsub("2991", "1991", Birthday)]
toy_data[ , bday := as.Date(Birthday, format = "%m/%d/%Y")]
toy_data[is.na(bday), bday :=
as.Date(gsub("([0-9])+(st|nd|rd|th)", "\\1", Birthday),
format = "%B %e %Y")]
# Descriptive Stats ####
toy_data[ , table(gender)]
toy_data[ , summary(height_num), by = male]
toy_data[ , summary(hairlength_num), by = male]
# Merging ####
install.packages("haven")
library(haven)
names <- setDT(read_dta("Names.dta"))
toy_data <- names[toy_data, on = c(name = "Name")]
# Graphing ####
## Basic Lines
x <- seq(0, 10, length.out = 1000)
plot(x, x^2, type = "l")
plot(x, x^2, type = "l", xlim = c(0, 5))
plot(x, x^2, type = "l", xlim = c(0, 2))
lines(x, x^(1/2))
plot(x, log(x), xlim = c(0, 5))
## Scatterplots
toy_data[ , plot(hairlength_num, height_num)]
toy_data[hairlength_num > 36, hairlength := NA]
toy_data[ , male := Gender == "Male"]
### Converting Birthday to Date (see ?as.Date and ?strptime)
#### First, fix outlier
toy_data[grepl("2991", Birthday),
Birthday := gsub("2991", "1991", Birthday)]
toy_data[ , bday := as.Date(Birthday, format = "%m/%d/%Y")]
toy_data[is.na(bday), bday :=
as.Date(gsub("([0-9])+(st|nd|rd|th)", "\\1", Birthday),
format = "%B %e %Y")]
# Descriptive Stats ####
toy_data[ , table(gender)]
toy_data[ , summary(height_num), by = male]
toy_data[ , summary(hairlength_num), by = male]
names <- setDT(read_dta("Names.dta"))
toy_data <- names[toy_data, on = c(name = "Name")]
# Graphing ####
## Basic Lines
x <- seq(0, 10, length.out = 1000)
plot(x, x^2, type = "l")
plot(x, x^2, type = "l", xlim = c(0, 5))
plot(x, x^2, type = "l", xlim = c(0, 2))
lines(x, x^(1/2))
plot(x, log(x), xlim = c(0, 5))
## Scatterplots
toy_data[ , plot(hairlength_num, height_num)]
toy_data[ , plot(hairlength_num, height_num)]
toy_data
# Michael Chirico
# August 30, 2016
# PSCI 692
# Stats Lab 1
# Preliminaries ####
## Clear workspace
rm(list = ls(all = TRUE))
## Set working directory
##   (where R looks for files by default hereafter)
setwd("~/Dropbox/Teaching/PSCI692")
# Hello World/Basics ####
print("Hello World")
## alternatively
cat("Hello World")
## Simple calculations
4 + 5
## Help files
?print
library(data.table)
# Reading Data, Basic Manipulation ####
## fread stands for **f**ast read. It is
##   typically several orders of magnitude faster
##   than the native read.csv available in R;
##   you won't typically notice unless the file has
##   in excess of 100,000 observations.
toy_data <- fread("ToyDataset_Jun30.csv")
## Summarize the data to get a quick glance
summary(toy_data)
## Renaming variables
##   *note -- this is the way to do this with the
##            data.table package. subtle differences.
setnames(toy_data, "Location of senior year in high school", "hsloc")
## Can do several at once
setnames(toy_data,
c("Year at Stanford", "Hair length (in inches)"),
c("styear", "hairlength"))
## Rename according to a pattern
flight_vars <- grep("^flights", names(toy_data), value = TRUE)
setnames(toy_data,
flight_vars, gsub("^flights", "plane", flight_vars))
toy_data_long <- melt(toy_data, measure.vars = patterns("^plane"),
variable.name = "year", value.name = "plane")
## Aggregation
toy_data_long[ , sum(plane), by = year]
## Reorder data
setorder(toy_data_long, Timestamp, Name, Birthday, Birthplace)
## Manipulating variables to be easier to use
##   *note: := is data.table-specific. See
##          http://stackoverflow.com/questions/7029944/ and
##          https://rawgit.com/wiki/Rdatatable/data.table/vignettes/datatable-reference-semantics.html
### Height as a string is pretty useless. Better as a decimal.
###   First, split roughly into feet and inches
###   (learned by inspection how the data is structured)
toy_data[ , height_1 := gsub("^([0-9]+).*", "\\1", Height)]
toy_data[ , height_2 := gsub("^[0-9]+[^0-9]+([0-9]+).*", "\\1", Height)]
toy_data[ , height_num := as.numeric(height_1) + as.numeric(height_2)/12]
### missed those expressed in inches alone or centimeters
toy_data[grepl("cm", Height),
height_num := as.numeric(gsub("[^0-9]", "", Height)) / 2.54 / 12]
toy_data[grepl("inches", Height) & !grepl("feet", Height),
height_num := as.numeric(gsub("[^0-9]", "", Height)) / 12][]
### remove temporary variables
toy_data[ , paste0("height_", 1:2) := NULL]
### Ditto hair length (luckily cleaner, but inspect!!)
toy_data[ , hairlength_num := as.integer(gsub("[^0-9]", "", hairlength))]
#### By inspection, some dates appear to have slipped into the hairlenght column.
toy_data[hairlength_num > 36, hairlength_num := NA]
### Gender dummy
toy_data[ , male := Gender == "Male"]
### Converting Birthday to Date (see ?as.Date and ?strptime)
#### First, fix outlier
toy_data[grepl("2991", Birthday),
Birthday := gsub("2991", "1991", Birthday)]
toy_data[ , bday := as.Date(Birthday, format = "%m/%d/%Y")]
toy_data[is.na(bday), bday :=
as.Date(gsub("([0-9])+(st|nd|rd|th)", "\\1", Birthday),
format = "%B %e %Y")]
# Descriptive Stats ####
toy_data[ , table(gender)]
toy_data[ , summary(height_num), by = male]
toy_data[ , summary(hairlength_num), by = male]
names <- setDT(read_dta("Names.dta"))
toy_data <- names[toy_data, on = c(name = "Name")]
# Graphing ####
## Basic Lines
x <- seq(0, 10, length.out = 1000)
plot(x, x^2, type = "l")
plot(x, x^2, type = "l", xlim = c(0, 5))
plot(x, x^2, type = "l", xlim = c(0, 2))
lines(x, x^(1/2))
plot(x, log(x), xlim = c(0, 5))
## Scatterplots
toy_data[ , plot(hairlength_num, height_num)]
plot.new()
toy_data[ , points(hairlength_num, height_num), by = male]
plot.new()
toy_data[ , points(hairlength_num, height_num)]
plot.new()
toy_data[ , points(hairlength_num, height_num)]
toy_data[ , plot(NULL, xlim = range(hairlength_num),
ylim = range(height_num))]
toy_data[ , plot(NULL, xlim = range(hairlength_num, na.rm = TRUE),
ylim = range(height_num, na.rm = TRUE))]
toy_data[ , plot(NULL, xlim = range(hairlength_num, na.rm = TRUE),
ylim = range(height_num, na.rm = TRUE),
xlab = "Hair Length", ylab = "Height")]
toy_data[ , points(hairlength_num, height_num), by = male]
toy_data[ , plot(NULL, xlim = range(hairlength_num, na.rm = TRUE),
ylim = range(height_num, na.rm = TRUE),
xlab = "Hair Length", ylab = "Height")]
toy_data[ , points(hairlength_num, height_num, col = .GRP), by = male]
toy_data[ , plot(NULL, xlim = range(hairlength_num, na.rm = TRUE),
ylim = range(height_num, na.rm = TRUE),
xlab = "Hair Length", ylab = "Height")]
toy_data[male == 0 , points(hairlength_num, height_num, col = 1)]
toy_data[male == 1 , points(hairlength_num, height_num, col = 2)]
toy_data[ , points(hairlength_num, height_num, col = 2)]
toy_data[ , plot(NULL, xlim = range(hairlength_num, na.rm = TRUE),
ylim = range(height_num, na.rm = TRUE),
xlab = "Hair Length", ylab = "Height")]
toy_data[ , points(hairlength_num, height_num, col = .GRP + 1L), by = male]
toy_data[ , plot(NULL, xlim = range(hairlength_num, na.rm = TRUE),
ylim = range(height_num, na.rm = TRUE),
xlab = "Hair Length", ylab = "Height")]
toy_data[male == 0 , points(hairlength_num, height_num, col = 1)]
toy_data[male == 1 , points(hairlength_num, height_num, col = 2)]
toy_data[ , plot(NULL, xlim = range(hairlength_num, na.rm = TRUE),
ylim = range(height_num, na.rm = TRUE),
xlab = "Hair Length", ylab = "Height")]
toy_data[ , points(hairlength_num, height_num, col = .GRP + 1L), by = male]
toy_data[ , plot(NULL, xlim = range(hairlength_num, na.rm = TRUE),
ylim = range(height_num, na.rm = TRUE),
xlab = "Hair Length", ylab = "Height")]
toy_data[male == 0 , points(hairlength_num, height_num, col = 1)]
toy_data[male == 1 , points(hairlength_num, height_num, col = 2)]
toy_data[ , plot(NULL, xlim = range(hairlength_num, na.rm = TRUE),
ylim = range(height_num, na.rm = TRUE),
xlab = "Hair Length", ylab = "Height")]
toy_data[ , points(hairlength_num, height_num, col = .GRP + 1L), by = male]
toy_data[(male)]
toy_data[ , .(Gender, Height, height_num, hairlength, hairlength_num)]
toy_data[order(Gender), .(Gender, Height, height_num, hairlength, hairlength_num)]
toy_data[ , plot(NULL, xlim = range(hairlength_num, na.rm = TRUE),
ylim = range(height_num, na.rm = TRUE),
xlab = "Hair Length", ylab = "Height")]
toy_data[male == 0 , points(hairlength_num, height_num, col = 1)]
toy_data[male == 1 , points(hairlength_num, height_num, col = 2)]
toy_data[ , plot(NULL, xlim = range(hairlength_num, na.rm = TRUE),
ylim = range(height_num, na.rm = TRUE),
xlab = "Hair Length", ylab = "Height")]
toy_data[ , points(hairlength_num, height_num, col = .GRP + 1L), by = male]
toy_data[ , plot(NULL, xlim = range(hairlength_num, na.rm = TRUE),
ylim = range(height_num, na.rm = TRUE),
xlab = "Hair Length", ylab = "Height")]
toy_data[male == 0 , points(hairlength_num, height_num, col = 1)]
toy_data[male == 1 , points(hairlength_num, height_num, col = 2)]
toy_data[ , plot(NULL, xlim = range(hairlength_num, na.rm = TRUE),
ylim = range(height_num, na.rm = TRUE),
xlab = "Hair Length", ylab = "Height")]
toy_data[ , points(hairlength_num, height_num, col = .GRP + 1L), by = male]
toy_data[order(Gender), .(Gender, height_num, hairlength_num)]
complete.cases(toy_data[order(Gender), .(Gender, height_num, hairlength_num)])
na.omit(toy_data[order(Gender), .(Gender, height_num, hairlength_num)])
dput(na.omit(toy_data[order(Gender), .(Gender, height_num, hairlength_num)]))
DT <-
structure(list(Gender = c("Female", "Female", "Female", "Female", "Female", "Female",
"Female", "Female", "Female", "Male", "Male", "Male"),
height = c(5.33, 5.33, 5.5, 5.08, 5.42,
5.75, 5.02, 5.17, 5.58, 6.17, 6, 6.17),
hairlength = c(15L, 14L, 14L, 14L, 16L, 18L,
20L, 14L, 16L, 2L, 4L, 2L)),
row.names = c(NA, -12L), class = c("data.table", "data.frame"),
.Names = c("Gender", "height_num", "hairlength_num"))
DT[ , plot(NULL, xlim = range(hairlength, na.rm = TRUE),
ylim = range(height, na.rm = TRUE),
xlab = "Hair Length", ylab = "Height")]
DT[ , points(hairlength, height, col = .GRP), by = Gender]
DT
DT <-
structure(list(Gender = c("Female", "Female", "Female", "Female", "Female", "Female",
"Female", "Female", "Female", "Male", "Male", "Male"),
height = c(5.33, 5.33, 5.5, 5.08, 5.42,
5.75, 5.02, 5.17, 5.58, 6.17, 6, 6.17),
hairlength = c(15L, 14L, 14L, 14L, 16L, 18L,
20L, 14L, 16L, 2L, 4L, 2L)),
row.names = c(NA, -12L), class = c("data.table", "data.frame"),
.Names = c("Gender", "height_num", "hairlength_num"))
DT <-
structure(list(Gender = c("Female", "Female", "Female", "Female", "Female", "Female",
"Female", "Female", "Female", "Male", "Male", "Male"),
height = c(5.33, 5.33, 5.5, 5.08, 5.42,
5.75, 5.02, 5.17, 5.58, 6.17, 6, 6.17),
hairlength = c(15L, 14L, 14L, 14L, 16L, 18L,
20L, 14L, 16L, 2L, 4L, 2L)),
row.names = c(NA, -12L), class = c("data.table", "data.frame"),
.Names = c("Gender", "height", "hairlength"))
DT[ , plot(NULL, xlim = range(hairlength, na.rm = TRUE),
ylim = range(height, na.rm = TRUE),
xlab = "Hair Length", ylab = "Height")]
DT[ , points(hairlength, height, col = .GRP), by = Gender]
